void processVector(std::vector<int> v) {
    ??? // Code to print values here

	for(int i=0;i<v.size();i++){
	cout << v[i] << endl;		
}

for(auto i: v){
	cout << i << endl;
}

processVector(std::vector<int>{1, 2, 3, 4});
\

removeDuplicates(Node *head){

unordered_map<int, int> umap;
Node *temp = head;
Node *prev = NULL;

while(temp != NULL){
	int x = temp->data;
	umap[x]++;
	if(umap[x] > 1){
		temp->next = temp->next;
		prev->next = temp	
	} else {
		prev = temp;
		temp=temp->next;
	}
	
}


}


int main() {
    Node* head = nullptr;

    // List: 10 -> 12 -> 11 -> 11 -> 12 -> 11 -> 10
    push(head, 10);
    push(head, 11);
    push(head, 12);
    push(head, 11);
    push(head, 11);
    push(head, 12);
    push(head, 10);

    removeDuplicates(head);  // WRITETHIS

return 0;
}


ps | grep -i "abc"


cat -n a.txt


class shape {
	protected:
		int length, breadth, height;

	public:
		Shape(Shape &s){
				
}
		virtual void calculateArea();		
};

class rectangle: public shape {
	public:
		rectangle(int l, int b){
		length=l;
		breadth=b;
		}
		void calculateArea(){
			cout << length*breadth;
		}		

};

class triangle: public shape{
{
	public:
		triangle(int b, int h){
		breadth = b;
		height = h;
		}
		void calculateArea(){
			cout << (breadth*height)/2;
		}		

};

void main(){
	Shape* s;
	rectangle r(10,20);
	triangle t(5,10);
	s = &r;
	s->calculateArea(); //print rectangle Area
	s = &t;
	s->calculateArea(); //print Triangle Area

}


mutex m;
int counter_g = 0;

void increment(){
	m.lock();
	counter_g++;
	m.unlock();
}

int main(){
	Thread t1(increment);
	Thread t2(increment);

	t1.join(); //wait for t1 thread to completion
	t2.join(); //wait for t1 thread to completion

}


int func1(){
	cout << var1;

	static int var2 = 0;
	var++;
	cout << var;
	return var1
}

int func1(int var1){ // 
	cout << var1;
	return
}

int main(){
	cout << func1();
}






enum{
	red,
	blue,
	green,
	black,
} color;

enum{
	mb,
	mbw,
	tata,

} cars;

color c1 = 2;
cars c2 = 2;
c1 = green;
c2 = mb;


move constructor,
### **Move Constructor in C++**

A **move constructor** is a special constructor in C++ used to transfer resources from one object to another **without copying**. It is part of the **move semantics** introduced in **C++11** to improve performance, especially with objects that manage dynamic memory or other resources.

---

### ðŸ”§ **Syntax of a Move Constructor**

```cpp
ClassName(ClassName&& other);
```

The `&&` indicates an **rvalue reference**, meaning it can bind to temporary objects that are about to be destroyed.

---

### âœ… **Why Use a Move Constructor?**

It avoids **deep copying** large data structures (e.g., vectors, strings) by **stealing** the internal data from the source object.

---

### ðŸ“¦ **Example**

```cpp
#include <iostream>
#include <vector>

class MyClass {
    int* data;
public:
    // Constructor
    MyClass(int value) {
        data = new int(value);
        std::cout << "Constructor called\n";
    }

    // Copy Constructor
    MyClass(const MyClass& other) {
        data = new int(*other.data);
        std::cout << "Copy constructor called\n";
    }

    // Move Constructor
    MyClass(MyClass&& other) noexcept {
        data = other.data;
        other.data = nullptr;
        std::cout << "Move constructor called\n";
    }

    // Destructor
    ~MyClass() {
        delete data;
        std::cout << "Destructor called\n";
    }

    void print() {
        if (data)
            std::cout << "Data: " << *data << "\n";
        else
            std::cout << "Data is null\n";
    }
};

int main() {
    MyClass a(42);             // Constructor
    MyClass b = std::move(a);  // Move constructor
    b.print();                 // Prints 42
    a.print();                 // Data is null
}
```

---

### ðŸ§  **Key Notes**

* The move constructor is triggered when an object is **initialized from an rvalue** (like `std::move(obj)`).
* If no move constructor is defined, C++ falls back to **copy constructor**.
* Mark it as `noexcept` if it cannot throwâ€”this helps performance in STL containers.

---

cross compile
**Cross-compilation** is the process of compiling code on one platform (called the **host**) to run on a different platform (called the **target**).

### When is Cross-Compilation Used?

Itâ€™s commonly used in scenarios where:

* The target system is too **resource-constrained** to compile code itself (e.g., embedded devices, microcontrollers).
* The target system runs a **different architecture** or **operating system** than the development system (e.g., compiling on x86 for an ARM-based system).

### Example

Youâ€™re developing software on a PC running Windows or Linux (**host**), but your application is intended to run on a Raspberry Pi or an Android phone (**target**). The processor architectures (x86 vs ARM) are different, so you can't directly run code compiled on your PC on the Pi or phone.

Instead, you use a **cross-compiler**â€”a tool that generates executable code for the target system from the host.

### Tools

* **GCC Cross Compiler**: You can install versions of `gcc` configured for cross-compilation, like `arm-linux-gnueabihf-gcc`.
* **CMake + Toolchains**: CMake supports cross-compiling by specifying a toolchain file.
* **Buildroot / Yocto**: Popular frameworks for building complete cross-compiled Linux systems.

---

Let me know if you'd like an example setup for a specific platform (e.g., compiling for ARM on Linux).


singleton


