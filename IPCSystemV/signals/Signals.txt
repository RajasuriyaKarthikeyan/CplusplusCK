signal - notification to a process indicating the occurrence of an event. Signal is also called software interrupt and is
not predictable to know its occurrence, hence it is also called an asynchronous event.


| Signal Name | Number | Description                                 |
| ----------- | ------ | ------------------------------------------- |
| `SIGHUP`    | 1      | Hangup (e.g. terminal closed)               |
| `SIGINT`    | 2      | Interrupt from keyboard (Ctrl+C)            |
| `SIGQUIT`   | 3      | Quit from keyboard (Ctrl+)                  |
| `SIGILL`    | 4      | Illegal instruction                         |
| `SIGTRAP`   | 5      | Trace/breakpoint trap                       |
| `SIGABRT`   | 6      | Abort (from `abort()`)                      |
| `SIGBUS`    | 7      | Bus error (bad memory access)               |
| `SIGFPE`    | 8      | Floating-point exception (e.g. divide by 0) |
| `SIGKILL`   | 9      | Kill (cannot be caught or ignored)          |
| `SIGUSR1`   | 10     | User-defined signal 1                       |
| `SIGSEGV`   | 11     | Segmentation fault                          |
| `SIGUSR2`   | 12     | User-defined signal 2                       |
| `SIGPIPE`   | 13     | Broken pipe (write to closed pipe)          |
| `SIGALRM`   | 14     | Alarm clock (from `alarm()`)                |
| `SIGTERM`   | 15     | Termination signal (default from `kill`)    |
| `SIGSTKFLT` | 16     | Stack fault (hardware) (rare)               |
| `SIGCHLD`   | 17     | Child process stopped or terminated         |
| `SIGCONT`   | 18     | Continue a stopped process                  |
| `SIGSTOP`   | 19     | Stop (cannot be caught or ignored)          |
| `SIGTSTP`   | 20     | Terminal stop (Ctrl+Z)                      |
| `SIGTTIN`   | 21     | Background read from terminal               |
| `SIGTTOU`   | 22     | Background write to terminal                |
| `SIGURG`    | 23     | Urgent condition on socket                  |
| `SIGXCPU`   | 24     | CPU time limit exceeded                     |
| `SIGXFSZ`   | 25     | File size limit exceeded                    |
| `SIGVTALRM` | 26     | Virtual alarm clock                         |
| `SIGPROF`   | 27     | Profiling timer expired                     |
| `SIGWINCH`  | 28     | Window size change (terminal)               |
| `SIGIO`     | 29     | I/O now possible (used for async I/O)       |
| `SIGPWR`    | 30     | Power failure (System V)                    |
| `SIGSYS`    | 31     | Bad system call                             |

SIGKILL (9) and SIGSTOP (19) cannot be caught, blocked, or ignored.

SIGTERM is the standard signal to gracefully terminate a process.

SIGINT and SIGTSTP are usually generated by the terminal (Ctrl+C and Ctrl+Z).

SIGUSR1 and SIGUSR2 are reserved for your custom uses.


signal(SIGINT, SIG_IGN); – Ignores the signal.
signal(SIGINT, SIG_DFL); – Restores default behavior.
signal(SIGKILL, handler); – ❌ Invalid. SIGKILL and SIGSTOP cannot be caught or ignored.

