Class:
    - user defined data type which servers as a blueprint for creating object
    - Define data members and methods that operate on data

Object:
    - instance of class (varibale of class datatype)

construtor : called when object got initialized and helps to initialize date member values
destructor : call when object goes out of scope

Types of construtor:
 default, copy, move, parametrized, delaget, default parametrized

Encapsulation : Binding data and method together to achive certain functionality
Abstraction : Hiding essential details by showing only the abstract layer
Polymorphism : abiliity to exist in more than one form 
    -> Compile Time (function and opertor overaloading)
    -> Run Time (virtual function and pure virtual function)
Inheritance : adaption behaviour and functionality of other classes

virtual function : member function in a base class that can be overridden in a derived class and 
                    is accessed polymorphically via base class pointers or references.

When a class has virtual functions, the compiler:
    Creates a VTable (Virtual Table) for that class.
    Stores a hidden vptr (virtual pointer) inside each object.
    The vptr points to that class's vtable.
    When calling a virtual function through a pointer/reference, the vtable is consulted to find the correct override.

| Term   | Description                                                                                  |
| ------ | -------------------------------------------------------------------------------------------- |
| VTable | A static array of function pointers created by the compiler. One per class (not per object). |
| VPtr   | A hidden pointer in each object pointing to the class's vtable.                              |

abstract class : contains only pure virtual function
Interface : contan pure virtual function and virtual destructor

| Feature                         | Abstract Class                    | Interface (C++ style)                |
| ------------------------------- | --------------------------------- | ------------------------------------ |
| Contains pure virtual functions |   Yes                             |   Yes                                |
| Can have data members           |   Yes                             |   No (ideally)                       |
| Can have implemented methods    |   Yes                             |   No                                 |
| Instantiation                   |   Not allowed                     |   Not allowed                        |
| Inheritance                     | Used for **common base behavior** | Used for **pure contract/interface** |


Templates : in C++ allow generic programming â€” you write code once and use it with different data types.

| Without Template                | With Template              |
| ------------------------------- | -------------------------- |
| Code duplication for every type | One function/class for all |
| Type-specific logic only        | Generic, reusable code     |
| Hard to maintain                | Easy to scale & maintain   |

| Feature             | Description                          |
| ------------------- | ------------------------------------ |
| Function Template   | Write one function for all types     |
| Class Template      | Write one class for all types        |
| Specialization      | Override for specific type behaviors |
| Multiple Parameters | Support more than one generic type   |


Exceptions - when program throws error at runtime it will help to handle it using try catch and throw

| Keyword  | Purpose                                           |
| -------- | ------------------------------------------------- |
| `try`    | Block of code to monitor                          |
| `throw`  | Used to signal an error                           |
| `catch`  | Handles the thrown exception                      |
| `what()` | Returns the error message (from `std::exception`) |


| Exception Type       | Description                                         |
| -------------------- | --------------------------------------------------- |
| `std::exception`     | Base class for all standard exceptions              |
| `std::logic_error`   | Errors in program logic (detectable before runtime) |
| `std::runtime_error` | Errors detectable only during runtime               |

| Type                    | Description                                   |
| ----------------------- | --------------------------------------------- |
| `std::invalid_argument` | Invalid arguments passed to a function        |
| `std::domain_error`     | Domain errors (e.g., sqrt of negative number) |
| `std::length_error`     | Exceeding maximum allowed size                |
| `std::out_of_range`     | Accessing elements out of container bounds    |

| Type                   | Description                 |
| ---------------------- | --------------------------- |
| `std::range_error`     | Result out of allowed range |
| `std::overflow_error`  | Arithmetic overflow         |
| `std::underflow_error` | Arithmetic underflow        |

| Type                     | Header       | Description                                                    |
| ------------------------ | ------------ | -------------------------------------------------------------- |
| `std::bad_alloc`         | `<new>`      | Thrown when `new` fails to allocate memory                     |
| `std::bad_cast`          | `<typeinfo>` | Thrown by `dynamic_cast` when casting fails                    |
| `std::bad_typeid`        | `<typeinfo>` | Thrown when using `typeid` on null pointer to polymorphic type |
| `std::ios_base::failure` | `<ios>`      | Thrown by I/O streams on failure                               |

File handlling:

| Mode          | Description                     |
| ------------- | ------------------------------- |
| `ios::in`     | Open for reading                |
| `ios::out`    | Open for writing                |
| `ios::app`    | Append to end of file           |
| `ios::ate`    | Move to end of file when opened |
| `ios::trunc`  | Truncate file if it exists      |
| `ios::binary` | Open in binary mode             |

Namespaces: 
Namespaces in C++ are used to organize code and avoid naming conflicts,
especially when multiple libraries or projects define functions, variables, or classes with the same name.
(eg using 2 different libraries which have same function, so calling Namespaces helps in to choose which function from Namespaces)

To prevent name clashes in large projects or libraries.
To group related code logically.
To distinguish between different implementations.

shallow copy
    Copies pointer values only, not the actual memory they point to.
    Both objects point to the same memory.
    Changes in one affect the other.
    When destructed, double deletion can occur (BAD!).

deep copy
    Allocates new memory for the copy.
    Copies the actual content, not just the pointer.
    Each object is independent

| Feature         | Shallow Copy                   | Deep Copy                             |
| --------------- | ------------------------------ | ------------------------------------- |
| Copies pointer? |   Yes                          |   No (copies value instead)           |
| Independent?    |   No (share memory)            |   Yes                                 |
| Safe to delete? |   No (can cause double delete) |   Yes                                 |
| Performance     |   Faster (less memory used)    |   Slightly slower (needs allocation)  |

Memory management
new to allocate -> delete to deallocate
new[] to allocate array -> delete[] to deallocate

| Mistake                | Problem                                          |
| ---------------------- | ------------------------------------------------ |
| Forgetting `delete`    | Memory leak                                      |
| `delete` twice         | Double free / undefined behavior                 |
| `delete` non-heap ptr  | Undefined behavior                               |
| `delete[]` vs `delete` | Use `delete[]` for arrays allocated with `new[]` |

RAII (Resource Acquisition Is Initialization)
    Use classes/objects to manage resources (memory, files, etc.)
    Destructor automatically frees them
    class MyBuffer {
        int* buffer;
        public:
            MyBuffer(size_t size) { buffer = new int[size]; }
            ~MyBuffer() { delete[] buffer; }  // auto cleanup
    };


Smart pointers in C++ are objects that manage dynamically allocated memory automatically. 
They help prevent memory leaks, dangling pointers, and make your code safer and cleaner.

| Smart Pointer     | Ownership Model                      | Auto Deletes? | Copyable?           | Use Case                                 |
| ----------------- | ------------------------------------ | ------------- | ------------------- | ---------------------------------------- |
| `std::unique_ptr` | Exclusive ownership                  |   Yes         |   No (only movable) | Single owner                             |
| `std::shared_ptr` | Shared ownership (ref count)         |   Yes         |   Yes               | Multiple owners (e.g., shared resources) |
| `std::weak_ptr`   | Non-owning reference to `shared_ptr` |   No          |   Yes               | Break circular references                |

Lambda Expression:
anonymous functions you can define inline, often used for short callbacks, functional-style programming, 
and STL algorithms like sort, for_each, etc

| Capture Syntax | Meaning                                |
| -------------- | -------------------------------------- |
| `[ ]`          | Capture nothing                        |
| `[=]`          | Capture all variables **by value**     |
| `[&]`          | Capture all variables **by reference** |
| `[x]`          | Capture variable `x` by value          |
| `[&x]`         | Capture variable `x` by reference      |

| Feature           | Use                                |
| ----------------- | ---------------------------------- |
| `[ ]`             | Capture variables                  |
| `mutable`         | Modify captured-by-value vars      |
| `auto`            | For storing lambdas                |
| `std::function<>` | Store lambdas with different types |


RTTI
identify the type of an object at runtime â€” particularly useful when dealing with polymorphism.

typeid â€“ Get the actual type of an object at runtime.
dynamic_cast â€“ Safely downcast a base pointer to a derived class.

RTTI only works when the class has at least one virtual function (i.e., polymorphic class).




| Feature        | Purpose                             | Usage Example                             |
| -------------- | ----------------------------------- | ----------------------------------------- |
| `typeid`       | Get actual type at runtime          | `typeid(*ptr).name()`                     |
| `dynamic_cast` | Safe downcasting with runtime check | `Derived* d = dynamic_cast<Derived*>(b);` |
| Requires       | At least one virtual function       |                                           |


