Communication can be of two types −

Between related processes initiating from only one process, such as parent and child processes.

Between unrelated processes, or two or more different processes.

Pipes − Communication between two related processes. The mechanism is half duplex meaning the first process communicates 
with the second process. To achieve a full duplex i.e., for the second process to communicate with the first process another 
pipe is required.

FIFO − Communication between two unrelated processes. FIFO is a full duplex, meaning the first process can communicate with the
second process and vice versa at the same time.

Message Queues − Communication between two or more processes with full duplex capacity. The processes will communicate with each 
other by posting a message and retrieving it out of the queue. Once retrieved, the message is no longer available in the queue.

Shared Memory − Communication between two or more processes is achieved through a shared piece of memory among all processes. 
The shared memory needs to be protected from each other by synchronizing access to all the processes.

Semaphores − Semaphores are meant for synchronizing access to multiple processes. When one process wants to access the memory 
(for reading or writing), it needs to be locked (or protected) and released when the access is removed. This needs to be repeated by 
all the processes to secure data.

Signals − Signal is a mechanism to communication between multiple processes by way of signaling. This means a source process will 
send a signal (recognized by number) and the destination process will handle it accordingly.


Required headers:
#include <sys/types.h>
#include <unistd.h>


code/text segment - normal codes
data segment - global and static variable
    uninitialized bss - uninitialized static and global
    initialized bss - initialized static and global
heap segment - dynmaic allocated variable/memory
stack segment - memoru of function and variables

size program.exe - provide all the segment info

fork() - system call to create prodess
        =0 means child process
        > 0 parent process
        < 0 process creation failed

A process can terminate in either of the two ways −
    Abnormally, occurs on delivery of certain signals, say terminate signal.
    Normally, using _exit() system call (or _Exit() system call) or exit() library function.

The difference between _exit() and exit() is mainly the cleanup activity. 
The exit() does some cleanup before returning the control back to the kernel, 
while the _exit() (or _Exit()) would return the control back to the kernel immediately.

#include <sys/wait.h> - headers
if the parent process exits before the child process, the inti process will beocme the parent of the child process
To avoid wait() system call need to be used
The wait() system call has limitation such as it can only wait until the exit of the next child. 
If we need to wait for a specific child it is not possible using wait(), however, it is possible using waitpid() system call.

The waitpid() system call would wait for specified children to terminate and return its termination status in the buffer 

waitid() system call. This system call waits for the child process to change state.


Process Group − Process group is a collection of one or more processes. A process group constitutes of one or more processes sharing 
the same process group identifier (PGID). A process group ID (PGID) is of the same type (pid_t) as the process ID. 
A process group has a process group leader, which is the process that creates the group and whose process ID becomes the 
process group ID of the group.

Sessions − It is a collection of various process groups.

Job Control − This permits a shell user to simultaneously execute multiple commands (or jobs), one in the foreground and all 
remaining in the background. It is also possible to move the jobs from the foreground to the background and vice-versa.

System call getrusage(), which provides information on system resource usage.

System calls related to accessing and setting resource limits viz., getrlimit(), setrlimit(), prlimit().

headers 
#include <sys/time.h>
#include <sys/resource.h>
int getrusage(int who, struct rusage *usage);
thread using flags RUSAGE_SELF, RUSAGE_CHILDREN, RUSAGE_THREAD

getrlimit() gets the resource limits in structure rlimit by inputting the resource one needs such as 
RLIMIT_NOFILE, RLIMIT_NPROC, RLIMIT_STACK, etc.
int getrlimit(int resource, struct rlimit *rlim);

setrlimit() sets the resource limits as mentioned in the rlimit structure as far as within the limits.
int setrlimit(int resource, const struct rlimit *rlim);

prlimit() is used for either for retrieving the current resource limits or for updating the resource limits to new values.
int prlimit(pid_t pid, int resource, const struct rlimit *new_limit, struct rlimit *old_limit);

resource for above header limits
RLIMIT_NOFILE − Returns the maximum number of file descriptors that can be opened by this process. 
(example, if it returns 1024, then the process has file descriptors from 0 to 1023.)
RLIMIT_NPROC − Maximum number of processes that can be created for a user of that process.
RLIMIT_STACK − The maximum size in bytes of the stack segment for that process.

daemon process - doesnt have any associated shell or terminal is known as the daemon process.
processes which run in the background to perform actions at predefined intervals and also respond to certain events. 
The daemon process should not have any user interaction, since it runs as a background process.

zombie process - even after completion , the process entry is presnt in process table
orphan process - parent procrss completes before child process, the child is orphan

overlay:
call another process to execute another program from the current file
#include<unistd.h>
int execl(const char *path, const char *arg, ...) -> last parameter should be null

